#pragma checksum "C:\Users\muhammetkaya\source\repos\SelfservisControlPanel\SCPDashboard\Views\Log\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2d3bc58c3ff1bb05ec55d1580d0db7dd1e4a0c01"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Log_Index), @"mvc.1.0.view", @"/Views/Log/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\muhammetkaya\source\repos\SelfservisControlPanel\SCPDashboard\Views\_ViewImports.cshtml"
using SCPDashboard;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\muhammetkaya\source\repos\SelfservisControlPanel\SCPDashboard\Views\_ViewImports.cshtml"
using SCPDashboard.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\muhammetkaya\source\repos\SelfservisControlPanel\SCPDashboard\Views\Log\Index.cshtml"
using NonFactors.Mvc.Grid;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2d3bc58c3ff1bb05ec55d1580d0db7dd1e4a0c01", @"/Views/Log/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b389b057aea7349f9c1cbd4bbb34ebfd36042eca", @"/Views/_ViewImports.cshtml")]
    public class Views_Log_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<Entities.Entities.LogFromJson>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 4 "C:\Users\muhammetkaya\source\repos\SelfservisControlPanel\SCPDashboard\Views\Log\Index.cshtml"
  
    Layout = "~/Views/Log/_AdminLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""modal fade"" id=""modalDetail"" tabindex=""-1"" role=""dialog"" data-backdrop=""static"" data-keyboard=""false"" aria-labelledby=""myLargeModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog modal-xs"" style=""margin-top: 125px"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Bilgiler</h5>
                <button onclick=""clearModal()"" type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <i aria-hidden=""true"" class=""ki ki-close""></i>
                </button>
            </div>

            <div class=""modal-body"">
                <table class=""table table-bordered mb-6"">
                    <thead>
                        <tr>
                            <th scope=""col"">Telefon</th>
                            <th scope=""col"">Sms Durumu</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                       ");
            WriteLiteral(@"     <td id=""Phone""></td>
                            <td style=""display: none"" id=""SmsSuccess"">Sms başarı ile gönderilmiştir.</td>
                            <td id=""SmsError"">Sms gönderimi başarısızdır.</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class=""modal-footer"">
                <button onclick=""clearModal()"" type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Kapat</button>
            </div>
        </div>
    </div>
</div>

<div class=""d-flex flex-column-fluid"">
    <!--begin::Container-->
    <div class=""container"" style=""max-width: 100%"">
        <!--end::Notice-->
        <!--begin::Card-->

        <div class=""card card-custom"">
            <div class=""card-header flex-wrap border-0 pt-6 pb-0"">
                <div class=""card-title"">
                    <h3 class=""card-label"">
                        Log Kayıtları
                    </h3>
                </div>
                ");
            WriteLiteral(@"<div class=""card-toolbar"">
                    <span id=""GridConfigure"" class=""fa fa-cog""></span>
                </div>
            </div>
            <div class=""card-body"">
                
                <!--begin: Search Form-->
                <!--begin::Search Form-->
                <!--end::Search Form-->
                <!--end: Search Form-->
                <!--begin: Datatable-->
                ");
#nullable restore
#line 66 "C:\Users\muhammetkaya\source\repos\SelfservisControlPanel\SCPDashboard\Views\Log\Index.cshtml"
            Write(Html
    .Grid(Model)
    .Build(columns =>
    {
        columns.Add(model => model.Token).Filterable(GridFilterCase.Upper).Named("token").Titled("Token aldı mı?").RenderedAs(model => model.Token == true ? "Başarılı" : "Başarısız");
        columns.Add(model => model.Tc).Filterable(GridFilterCase.Upper).Named("tc").Titled("Tc").RenderedAs(model => model.Tc == null ? "Boş" : model.Tc);
        columns.Add(model => model.Giris).Filterable(GridFilterCase.Upper).Named("giris").Titled("Giriş").RenderedAs(model => model.Giris == true ? "Başarılı" : "Başarısız");
        columns.Add(model => model.SifreDegistirme).Filterable(GridFilterCase.Upper).Named("sifredegistirme").Titled("Şifre Değiştirme").RenderedAs(model => model.SifreDegistirme == true ? "Başarılı" : "Başarısız");
        columns.Add(model => model.MailDogrulama).Filterable(GridFilterCase.Upper).Named("maildogrulama").Titled("Mail Doğrulama").RenderedAs(model => model.MailDogrulama == true ? "Başarılı" : "Başarısız");
        columns.Add(model => model.TelefonDogrulama).Filterable(GridFilterCase.Upper).Named("telefondogrulama").Titled("Telefon Doğrulama").RenderedAs(model => model.TelefonDogrulama == true ? "Başarılı" : "Başarısız");
        columns.Add(model => model.SifreResetlemeSonucu).Filterable(GridFilterCase.Upper).Named("sifreresetlemesonucu").Titled("Şifre Resetleme Sonucu").RenderedAs(model => model.SifreResetlemeSonucu == true ? "Başarılı" : "Başarısız");
        columns.Add(model => model.MailGonderme).Filterable(GridFilterCase.Upper).Named("mailgonderme").Titled("Mail Durumu").RenderedAs(model => model.MailGonderme == true ? "Başarılı" : "Başarısız");
        columns.Add(model => model.SmsGonderme).Filterable(GridFilterCase.Upper).Named("smsgonderme").Titled("Sms Durumu").RenderedAs(model => model.SmsGonderme == true ? "Başarılı" : "Başarısız");
        columns.Add(model => model.SmsKodu).Filterable(GridFilterCase.Upper).Named("smskodu").Titled("Sms Kodu").RenderedAs(model => model.SmsKodu == null ? "Boş" : model.SmsKodu);
        columns.Add(model => model.Tarih.ToString("dd/MM/yyyy")).Named("tarih").Titled("Tarih").Filterable(false).Sortable(true);
        columns.Add(model => "<a href='#' type='button' class='detay btn btn-primary ' style='margin-right:10px' id='detayModal' data-toggle='modal' data-aday='" + model.SmsKodu + "' data-target='#modalDetail'><i class='fas fa-book'></i></a>").Titled("Detay").Encoded(false).Css("transaction");


    })
    .Named("preferences")
   // .Configure()
    .Using(GridFilterMode.Header)
    .Empty("No data found")
    .Filterable()
    .Sortable()
    .Pageable()
    .Attributed(new { id = "StudentTable" })
);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                <!--end: Datatable-->\r\n            </div>\r\n        </div>\r\n        <!--end::Card-->\r\n    </div>\r\n    <!--end::Container-->\r\n</div>\r\n\r\n\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"


    <script>

        var rowData;
        $(""#StudentTable"").on(""click"", ""a.detay"", function (e) {

            var SmsCode = e.currentTarget.dataset[""aday""];
            $.ajax({
                async: false,
                method: ""GET"",
                dataType: ""json"",
                url: ""selfservislogs/log/getSms"",
                data: { SmsCode: SmsCode }
            }).done(function (resp) {
                rowData = resp;
                document.getElementById(""Phone"").innerHTML = rowData.data.data.rapor.gonderilen[0];
                if (rowData.success == true) {
                    document.getElementById(""SmsSuccess"").style.display = ""block"";
                    document.getElementById(""SmsError"").style.display = ""none"";
                }
                else {
                    document.getElementById(""SmsSuccess"").style.display = ""none"";
                    document.getElementById(""SmsError"").style.display = ""block"";
                }
                
      ");
                WriteLiteral(@"      })
            
        });

        function clearModal() {
            document.getElementById(""Phone"").innerHTML = ""Bulunamadı"";
            document.getElementById(""SmsSuccess"").style.display = ""none"";
            document.getElementById(""SmsError"").style.display = ""block"";
        }

        const configuration = localStorage.getItem(""grid-config"");
        const grid = new MvcGrid(document.querySelector("".mvc-grid""));

        if (configuration) {
            // Client side configuration function
            grid.configure(JSON.parse(configuration));
        }

        document.getElementById(""GridConfigure"").addEventListener(""click"", function () {
            new MvcGrid(document.querySelector("".mvc-grid"")).showConfiguration(this);
        });

        document.addEventListener(""gridconfigure"", e => {
            const grid = e.detail.grid;
            const configuration = grid.getConfiguration();

            // Save configuration to a cookie/local storage/backend/etc.");
                WriteLiteral("\r\n            // Every configuration should have a unique name for every grid, preferrably grid name.\r\n            localStorage.setItem(\"grid-\" + grid.name, JSON.stringify(configuration));\r\n        });\r\n    </script>\r\n\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<Entities.Entities.LogFromJson>> Html { get; private set; }
    }
}
#pragma warning restore 1591
